# -*- coding: utf-8 -*-
"""Projeto avaliações de livros.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11jTI2DKdvFMAtAOyS9OMWrkkeTFjgQs8
"""

import pandas as pd
import seaborn as sns
import statistics as sts
from scipy import stats
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, confusion_matrix
import matplotlib.pyplot as plt

from sklearn.tree import export_graphviz
from graphviz import Source
from IPython.display import display

usuarios = pd.read_csv('BX-Users.csv', sep=';', encoding='latin-1')
livros = pd.read_csv('BX_Books.csv', sep=';', encoding='latin-1', on_bad_lines='skip')
avaliacoes = pd.read_csv('BX-Book-Ratings.csv', sep=';', encoding='latin-1')

df = avaliacoes.merge(usuarios, on='User-ID').merge(livros, on='ISBN') # Junta as tabelas
df['gostou'] = df['Book-Rating'].apply(lambda x: 1 if x >= 7 else 0) # Cria a coluna de "gostou"
df.to_csv('avaliacoesDeUsuarios.csv', index=False) # Salva em 1 CSV final

dados = pd.read_csv('avaliacoesDeUsuarios.csv')

dados = dados.drop(['Image-URL-S', 'Image-URL-M', 'Image-URL-L'], axis=1)
dados.head()

dados.shape

dados.isnull().sum()

mediana = sts.median(dados["Age"])
mediana

dados["Age"].fillna(mediana, inplace=True)

pd.set_option('display.float_format', '{:.2f}'.format)
dados["Age"].describe()

sns.boxplot(dados["Age"]).set_title("idade")

dados.loc[(dados["Age"] <= 6) | (dados["Age"] > 116), "Age"] = mediana

dados["Age"].describe()

sns.boxplot(dados["Age"]).set_title("idade")

dados.loc[(dados['Book-Author'].isnull()) | (dados['Publisher'].isnull())]

dados['Publisher'].fillna('Editora Desconhecida', inplace=True)
dados['Book-Author'].fillna('Autor Desconhecido', inplace=True)

dados['Book-Rating'].describe()

dados['Year-Of-Publication'].describe()

sns.boxplot(dados["Year-Of-Publication"]).set_title("Year-Of-Publication")

dados.loc[(dados["Year-Of-Publication"] < 1700)| (dados["Year-Of-Publication"] > 2025)]

mediana = sts.median(dados["Year-Of-Publication"])
mediana

dados.loc[(dados["Year-Of-Publication"] < 1850)| (dados["Year-Of-Publication"] > 2025), "Year-Of-Publication"] = mediana

dados['Year-Of-Publication'].describe()

sns.boxplot(dados["Year-Of-Publication"]).set_title("Year-Of-Publication")

dados[dados.duplicated(['User-ID', 'ISBN'], keep=False)]

print(dados.dtypes)

dados['Age'] = dados['Age'].astype(int)

# Separar os dados
classe_0 = dados[dados['gostou'] == 0]
classe_1 = dados[dados['gostou'] == 1]

# Undersampling da classe maior
classe_0_undersampled = classe_0.sample(n=len(classe_1), random_state=0)

# Juntar as duas classes
dados_balanceado = pd.concat([classe_0_undersampled, classe_1], axis=0)

# Embaralhar o dataset
dados_balanceado = dados_balanceado.sample(frac=1, random_state=0).reset_index(drop=True)

# Verificar
print(dados_balanceado['gostou'].value_counts())

previsores = dados_balanceado.iloc[:, [0,1,3,4,6,7,8]].values
classe = dados_balanceado.iloc[:,9].values

previsores.shape

labelencoder0 = LabelEncoder()
previsores[:,0] = labelencoder0.fit_transform(previsores[:,0])

labelencoder1 = LabelEncoder()
previsores[:,1] = labelencoder1.fit_transform(previsores[:,1])

labelencoder2 = LabelEncoder()
previsores[:,2] = labelencoder2.fit_transform(previsores[:,2])

labelencoder4 = LabelEncoder()
previsores[:,4] = labelencoder4.fit_transform(previsores[:,4])

labelencoder6 = LabelEncoder()
previsores[:,6] = labelencoder6.fit_transform(previsores[:,6])

x_treinamento, x_teste, y_treinamento, y_teste = train_test_split(previsores,
                                                                  classe,
                                                                  test_size = 0.3,
                                                                  random_state = 0)

arvore = DecisionTreeClassifier()

arvore.fit(x_treinamento, y_treinamento)

previsoes = arvore.predict(x_teste)

taxa_acerto = accuracy_score(y_teste, previsoes)
taxa_acerto

confusao = confusion_matrix(y_teste, previsoes)
confusao

plt.figure(figsize=(8,6))
sns.heatmap(confusao, annot=True, cmap="Greens", cbar=False, fmt="d",
xticklabels=["Não gostou", "Gostou"],
yticklabels=["Não gostou", "Gostou"])

plt.title("Matriz de confusão")
plt.xlabel("Previsão")
plt.ylabel("Real")
plt.show();